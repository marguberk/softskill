from sqlalchemy.orm import Session
from sqlalchemy import func, and_
from datetime import datetime, date, timedelta
from typing import List
import random

from app.models.tasks import DailyTask, TaskCompletion, UserDailyTaskAssignment, UserLevel, TaskType, TaskDifficulty
from app.models.user import User
from app.schemas.tasks import DailyTasksPageResponse, UserLevelResponse, CompleteTaskResponse
from app.services.gamification import GamificationService


class TasksService:
    def __init__(self, db: Session):
        self.db = db

    def get_or_create_user_level(self, user_id: int) -> UserLevel:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_level = self.db.query(UserLevel).filter(UserLevel.user_id == user_id).first()
        if not user_level:
            user_level = UserLevel(
                user_id=user_id,
                total_points=0,
                current_level=1,
                points_to_next_level=100
            )
            self.db.add(user_level)
            self.db.commit()
            self.db.refresh(user_level)
        return user_level

    def assign_daily_tasks(self, user_id: int) -> List[UserDailyTaskAssignment]:
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        today = date.today()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        incomplete_assignments = self.db.query(UserDailyTaskAssignment).filter(
            and_(
                UserDailyTaskAssignment.user_id == user_id,
                func.date(UserDailyTaskAssignment.assigned_date) == today,
                UserDailyTaskAssignment.is_completed == False
            )
        ).all()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
        if incomplete_assignments:
            return incomplete_assignments
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
        all_today_assignments = self.db.query(UserDailyTaskAssignment).filter(
            and_(
                UserDailyTaskAssignment.user_id == user_id,
                func.date(UserDailyTaskAssignment.assigned_date) == today
            )
        ).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        assigned_task_ids = [a.task_id for a in all_today_assignments]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        available_tasks = self.db.query(DailyTask).filter(
            and_(
                DailyTask.is_active == True,
                ~DailyTask.id.in_(assigned_task_ids) if assigned_task_ids else True
            )
        ).all()
        
        if not available_tasks:
            return all_today_assignments
        
        # –í—ã–±–∏—Ä–∞–µ–º 1 —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        selected_task = random.choice(available_tasks)
        
        assignment = UserDailyTaskAssignment(
            user_id=user_id,
            task_id=selected_task.id,
            assigned_date=datetime.now()
        )
        self.db.add(assignment)
        self.db.commit()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–≤–∫–ª—é—á–∞—è –Ω–æ–≤–æ–µ)
        return self.db.query(UserDailyTaskAssignment).filter(
            and_(
                UserDailyTaskAssignment.user_id == user_id,
                func.date(UserDailyTaskAssignment.assigned_date) == today
            )
        ).all()

    def _select_diverse_tasks(self, tasks: List[DailyTask], count: int) -> List[DailyTask]:
        """–í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        tasks_by_type = {}
        for task in tasks:
            if task.task_type not in tasks_by_type:
                tasks_by_type[task.task_type] = []
            tasks_by_type[task.task_type].append(task)
        
        selected = []
        types_used = set()
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        for task_type, type_tasks in tasks_by_type.items():
            if len(selected) < count:
                task = random.choice(type_tasks)
                selected.append(task)
                types_used.add(task_type)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
        remaining_tasks = [t for t in tasks if t not in selected]
        while len(selected) < count and remaining_tasks:
            task = random.choice(remaining_tasks)
            selected.append(task)
            remaining_tasks.remove(task)
        
        return selected

    def get_today_tasks(self, user_id: int) -> List[UserDailyTaskAssignment]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = date.today()
        
        assignments = self.db.query(UserDailyTaskAssignment).filter(
            and_(
                UserDailyTaskAssignment.user_id == user_id,
                func.date(UserDailyTaskAssignment.assigned_date) == today
            )
        ).all()
        
        if not assignments:
            assignments = self.assign_daily_tasks(user_id)
        
        return assignments

    def complete_task(self, user_id: int, task_id: int) -> CompleteTaskResponse:
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ"""
        today = date.today()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        assignment = self.db.query(UserDailyTaskAssignment).filter(
            and_(
                UserDailyTaskAssignment.user_id == user_id,
                UserDailyTaskAssignment.task_id == task_id,
                func.date(UserDailyTaskAssignment.assigned_date) == today,
                UserDailyTaskAssignment.is_completed == False
            )
        ).first()
        
        if not assignment:
            return CompleteTaskResponse(
                success=False,
                points_earned=0,
                message="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            )
        
        task = self.db.query(DailyTask).filter(DailyTask.id == task_id).first()
        if not task:
            return CompleteTaskResponse(
                success=False,
                points_earned=0,
                message="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        assignment.is_completed = True
        assignment.completed_at = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        completion = TaskCompletion(
            user_id=user_id,
            task_id=task_id,
            points_earned=task.points
        )
        self.db.add(completion)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP
        gamification_service = GamificationService(self.db)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ GamificationService
        try:
            xp_result = gamification_service.complete_daily_task(user_id, task_id, task.points)
            
            self.db.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            self._assign_new_task_if_needed(user_id)
            
            message = f"üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {xp_result.xp_gained} XP!"
            if xp_result.level_up:
                message += f" –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {xp_result.new_level} —É—Ä–æ–≤–Ω—è!"
            
            return CompleteTaskResponse(
                success=True,
                points_earned=xp_result.xp_gained,
                new_level=xp_result.new_level if xp_result.level_up else None,
                message=message
            )
        except Exception as e:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ fallback
            print(f"–û—à–∏–±–∫–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
            user_level = self.get_or_create_user_level(user_id)
            old_level = user_level.current_level
            user_level.total_points += task.points
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            new_level = self._calculate_level(user_level.total_points)
            level_up = new_level > old_level
            
            if level_up:
                user_level.current_level = new_level
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            points_for_next_level = self._points_for_next_level(user_level.current_level)
            user_level.points_to_next_level = max(0, points_for_next_level - user_level.total_points)
            
            self.db.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            self._assign_new_task_if_needed(user_id)
            
            message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {task.points} –æ—á–∫–æ–≤!"
            if level_up:
                message += f" –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!"
            
            return CompleteTaskResponse(
                success=True,
                points_earned=task.points,
                new_level=new_level if level_up else None,
                message=message
            )

    def _assign_new_task_if_needed(self, user_id: int) -> None:
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ"""
        today = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        incomplete_assignments = self.db.query(UserDailyTaskAssignment).filter(
            and_(
                UserDailyTaskAssignment.user_id == user_id,
                func.date(UserDailyTaskAssignment.assigned_date) == today,
                UserDailyTaskAssignment.is_completed == False
            )
        ).all()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–µ
        if len(incomplete_assignments) == 0:
            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today_assignments = self.db.query(UserDailyTaskAssignment).filter(
                and_(
                    UserDailyTaskAssignment.user_id == user_id,
                    func.date(UserDailyTaskAssignment.assigned_date) == today
                )
            ).all()
            
            assigned_task_ids = [a.task_id for a in today_assignments]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            available_tasks = self.db.query(DailyTask).filter(
                and_(
                    DailyTask.is_active == True,
                    ~DailyTask.id.in_(assigned_task_ids) if assigned_task_ids else True
                )
            ).all()
            
            if available_tasks:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                new_task = random.choice(available_tasks)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                new_assignment = UserDailyTaskAssignment(
                    user_id=user_id,
                    task_id=new_task.id,
                    assigned_date=datetime.now()
                )
                self.db.add(new_assignment)
                self.db.commit()

    def _calculate_level(self, total_points: int) -> int:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤"""
        # –£—Ä–æ–≤–µ–Ω—å 1: 0-99 –æ—á–∫–æ–≤
        # –£—Ä–æ–≤–µ–Ω—å 2: 100-249 –æ—á–∫–æ–≤  
        # –£—Ä–æ–≤–µ–Ω—å 3: 250-449 –æ—á–∫–æ–≤
        # –£—Ä–æ–≤–µ–Ω—å 4: 450-699 –æ—á–∫–æ–≤
        # –ò —Ç–∞–∫ –¥–∞–ª–µ–µ...
        level = 1
        points_needed = 100
        
        while total_points >= points_needed:
            level += 1
            points_needed += level * 50 + (level - 1) * 50
        
        return level

    def _points_for_next_level(self, current_level: int) -> int:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        # –£—Ä–æ–≤–µ–Ω—å 1 -> 2: 100 –æ—á–∫–æ–≤
        # –£—Ä–æ–≤–µ–Ω—å 2 -> 3: 250 –æ—á–∫–æ–≤  
        # –£—Ä–æ–≤–µ–Ω—å 3 -> 4: 450 –æ—á–∫–æ–≤
        # –£—Ä–æ–≤–µ–Ω—å 4 -> 5: 700 –æ—á–∫–æ–≤
        if current_level == 1:
            return 100
        elif current_level == 2:
            return 250
        elif current_level == 3:
            return 450
        elif current_level == 4:
            return 700
        else:
            # –î–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π: –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ 300 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ 4-–≥–æ
            return 700 + (current_level - 4) * 300

    def get_recent_completions(self, user_id: int, limit: int = 5) -> List[TaskCompletion]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        return self.db.query(TaskCompletion).filter(
            TaskCompletion.user_id == user_id
        ).order_by(TaskCompletion.completed_at.desc()).limit(limit).all()

    def get_daily_tasks_page_data(self, user_id: int) -> DailyTasksPageResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        today_tasks = self.get_today_tasks(user_id)
        user_level = self.get_or_create_user_level(user_id)
        recent_completions = self.get_recent_completions(user_id)
        
        return DailyTasksPageResponse(
            today_tasks=today_tasks,
            user_level=user_level,
            recent_completions=recent_completions
        ) 