#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MaroAI
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python view_database.py
"""

import sqlite3
import pandas as pd
from tabulate import tabulate

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('app.db')
        return conn
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def show_tables(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    
    print("üóÑÔ∏è –¢–ê–ë–õ–ò–¶–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
    print("=" * 50)
    for i, (table,) in enumerate(tables, 1):
        cursor.execute(f"SELECT COUNT(*) FROM {table}")
        count = cursor.fetchone()[0]
        print(f"{i:2}. {table:<25} ({count} –∑–∞–ø–∏—Å–µ–π)")
    print()

def show_users(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = "SELECT id, email, full_name, role, created_at FROM users ORDER BY id"
    df = pd.read_sql_query(query, conn)
    
    print("üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
    print("=" * 80)
    print(tabulate(df, headers=df.columns, tablefmt='grid', showindex=False))
    print()

def show_courses(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã"""
    query = """
    SELECT id, title, skill_type, difficulty_level, 
           duration_hours, is_published 
    FROM courses ORDER BY id
    """
    df = pd.read_sql_query(query, conn)
    
    print("üìö –ö–£–†–°–´:")
    print("=" * 120)
    print(tabulate(df, headers=df.columns, tablefmt='grid', showindex=False))
    print()

def show_course_structure(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—É—Ä—Å–æ–≤"""
    query = """
    SELECT c.title as '–ö—É—Ä—Å', 
           m.title as '–ú–æ–¥—É–ª—å',
           COUNT(l.id) as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤'
    FROM courses c 
    LEFT JOIN modules m ON c.id = m.course_id 
    LEFT JOIN lessons l ON m.id = l.module_id 
    GROUP BY c.id, m.id 
    ORDER BY c.id, m."order"
    """
    df = pd.read_sql_query(query, conn)
    
    print("üèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –ö–£–†–°–û–í:")
    print("=" * 100)
    print(tabulate(df, headers=df.columns, tablefmt='grid', showindex=False))
    print()

def show_sample_lessons(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —É—Ä–æ–∫–æ–≤"""
    query = """
    SELECT l.id, l.title as '–£—Ä–æ–∫', 
           m.title as '–ú–æ–¥—É–ª—å', 
           c.title as '–ö—É—Ä—Å'
    FROM lessons l
    JOIN modules m ON l.module_id = m.id
    JOIN courses c ON m.course_id = c.id
    ORDER BY c.id, m."order", l."order"
    LIMIT 15
    """
    df = pd.read_sql_query(query, conn)
    
    print("üìñ –ü–†–ò–ú–ï–†–´ –£–†–û–ö–û–í:")
    print("=" * 120)
    print(tabulate(df, headers=df.columns, tablefmt='grid', showindex=False))
    print()

def show_achievements(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    query = "SELECT id, title, description, points FROM achievements LIMIT 10"
    try:
        df = pd.read_sql_query(query, conn)
        if not df.empty:
            print("üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
            print("=" * 100)
            print(tabulate(df, headers=df.columns, tablefmt='grid', showindex=False))
            print()
        else:
            print("üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø: –ü–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã\n")
    except:
        print("üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø: –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n")

def interactive_query(conn):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    print("üíª –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú:")
    print("–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    
    while True:
        try:
            query = input("SQL> ").strip()
            if query.lower() == 'exit':
                break
            if not query:
                continue
                
            df = pd.read_sql_query(query, conn)
            print(tabulate(df, headers=df.columns, tablefmt='grid', showindex=False))
            print()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}\n")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ü–†–û–°–ú–û–¢–† –ë–ê–ó–´ –î–ê–ù–ù–´–• MaroAI")
    print("=" * 50)
    
    conn = connect_db()
    if not conn:
        return
    
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pandas –æ–ø—Ü–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pd.set_option('display.max_columns', None)
        pd.set_option('display.width', None)
        pd.set_option('display.max_colwidth', 50)
        
        show_tables(conn)
        show_users(conn)
        show_courses(conn)
        show_course_structure(conn)
        show_sample_lessons(conn)
        show_achievements(conn)
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        choice = input("–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã? (y/n): ")
        if choice.lower() == 'y':
            interactive_query(conn)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main() 