#!/usr/bin/env python3

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –≤ PostgreSQL
–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ app.db –≤ SQL —Ñ–æ—Ä–º–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å PostgreSQL
"""

import sqlite3
import sys
from datetime import datetime

def export_sqlite_to_sql(sqlite_db_path, output_file):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ SQL —Ñ–∞–π–ª –¥–ª—è PostgreSQL"""
    
    print(f"üîÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ {sqlite_db_path}...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
    conn = sqlite3.connect(sqlite_db_path)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("-- MaroAI Database Export from SQLite to PostgreSQL\n")
        f.write(f"-- Generated on {datetime.now()}\n\n")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –Ω–∞ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞
        f.write("SET session_replication_role = replica;\n\n")
        
        for table_name in tables:
            table_name = table_name[0]
            print(f"üìã –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns_info = cursor.fetchall()
            
            if not columns_info:
                continue
                
            columns = [col[1] for col in columns_info]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            cursor.execute(f"SELECT * FROM {table_name}")
            rows = cursor.fetchall()
            
            if rows:
                f.write(f"-- –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}\n")
                f.write(f"DELETE FROM {table_name};\n")
                
                for row in rows:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è PostgreSQL
                    values = []
                    for val in row:
                        if val is None:
                            values.append('NULL')
                        elif isinstance(val, str):
                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
                            escaped_val = val.replace("'", "''")
                            values.append(f"'{escaped_val}'")
                        elif isinstance(val, (int, float)):
                            values.append(str(val))
                        else:
                            values.append(f"'{val}'")
                    
                    columns_str = ', '.join(columns)
                    values_str = ', '.join(values)
                    f.write(f"INSERT INTO {table_name} ({columns_str}) VALUES ({values_str});\n")
                
                f.write(f"\n")
        
        # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        f.write("SET session_replication_role = DEFAULT;\n")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        f.write("\n-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π\n")
        for table_name in [t[0] for t in tables]:
            f.write(f"SELECT setval(pg_get_serial_sequence('{table_name}', 'id'), COALESCE(max(id), 1)) FROM {table_name};\n")
    
    conn.close()
    print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_file}")

def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python sqlite_to_postgres.py <path_to_sqlite.db>")
        print("–ü—Ä–∏–º–µ—Ä:")
        print("  python sqlite_to_postgres.py app.db")
        sys.exit(1)
    
    sqlite_db_path = sys.argv[1]
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"maroai_postgres_dump_{timestamp}.sql"
    
    try:
        export_sqlite_to_sql(sqlite_db_path, output_file)
        print(f"\nüì§ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª {output_file} –Ω–∞ —Å–µ—Ä–≤–µ—Ä:")
        print(f"scp {output_file} ubuntu@85.202.192.20:~/")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 